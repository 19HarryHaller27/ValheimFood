using System;
using System.Collections.Generic;
using System.Linq;
using BepInEx.Configuration;

namespace Jotunn.Configs
{
	/// <summary>
	///     Helper to get existing piece category names
	/// </summary>
	// Token: 0x0200008B RID: 139
	public static class PieceCategories
	{
		/// <summary>
		///     Piece 'Misc' category
		/// </summary>
		// Token: 0x17000139 RID: 313
		// (get) Token: 0x060006AC RID: 1708 RVA: 0x00020D2A File Offset: 0x0001EF2A
		public static string Misc
		{
			get
			{
				return "Misc";
			}
		}

		/// <summary>
		///     Piece 'Crafting' category
		/// </summary>
		// Token: 0x1700013A RID: 314
		// (get) Token: 0x060006AD RID: 1709 RVA: 0x00020D31 File Offset: 0x0001EF31
		public static string Crafting
		{
			get
			{
				return "Crafting";
			}
		}

		/// <summary>
		///     Piece 'Building' category
		/// </summary>
		// Token: 0x1700013B RID: 315
		// (get) Token: 0x060006AE RID: 1710 RVA: 0x00020D38 File Offset: 0x0001EF38
		public static string Building
		{
			get
			{
				return "BuildingWorkbench";
			}
		}

		/// <summary>
		///     Piece 'HeavyBuild' category
		/// </summary>
		// Token: 0x1700013C RID: 316
		// (get) Token: 0x060006AF RID: 1711 RVA: 0x00020D3F File Offset: 0x0001EF3F
		public static string HeavyBuild
		{
			get
			{
				return "BuildingStonecutter";
			}
		}

		/// <summary>
		///     Piece 'Furniture' category
		/// </summary>
		// Token: 0x1700013D RID: 317
		// (get) Token: 0x060006B0 RID: 1712 RVA: 0x00020D46 File Offset: 0x0001EF46
		public static string Furniture
		{
			get
			{
				return "Furniture";
			}
		}

		/// <summary>
		///     Piece 'Food' category
		/// </summary>
		// Token: 0x1700013E RID: 318
		// (get) Token: 0x060006B1 RID: 1713 RVA: 0x00020D4D File Offset: 0x0001EF4D
		public static string Food
		{
			get
			{
				return "Food";
			}
		}

		/// <summary>
		///     Piece 'Mead' category
		/// </summary>
		// Token: 0x1700013F RID: 319
		// (get) Token: 0x060006B2 RID: 1714 RVA: 0x00020D54 File Offset: 0x0001EF54
		public static string Mead
		{
			get
			{
				return "Meads";
			}
		}

		/// <summary>
		///     Piece 'Feasts' category
		/// </summary>
		// Token: 0x17000140 RID: 320
		// (get) Token: 0x060006B3 RID: 1715 RVA: 0x00020D5B File Offset: 0x0001EF5B
		public static string Feasts
		{
			get
			{
				return "Feasts";
			}
		}

		/// <summary>
		///     All piece categories
		/// </summary>
		// Token: 0x17000141 RID: 321
		// (get) Token: 0x060006B4 RID: 1716 RVA: 0x00020D62 File Offset: 0x0001EF62
		public static string All
		{
			get
			{
				return "All";
			}
		}

		/// <summary>
		///     Gets the human readable name to internal names map
		/// </summary>
		/// <returns></returns>
		// Token: 0x060006B5 RID: 1717 RVA: 0x00020D69 File Offset: 0x0001EF69
		public static Dictionary<string, string> GetNames()
		{
			return PieceCategories.NamesMap;
		}

		/// <summary>
		///     Get a <see cref="T:BepInEx.Configuration.AcceptableValueList`1" /> of all piece category names.
		///     This can be used to create a <see cref="T:BepInEx.Configuration.ConfigEntry`1" /> where only valid piece category can be selected.<br /><br />
		///     Example:
		///     <code>
		///         var pieceCategoryConfig = Config.Bind("Section", "Key", nameof(PieceCategories.Building), new ConfigDescription("Description", PieceCategories.GetAcceptableValueList()));
		///     </code>
		/// </summary>
		/// <returns></returns>
		// Token: 0x060006B6 RID: 1718 RVA: 0x00020D70 File Offset: 0x0001EF70
		public static AcceptableValueList<string> GetAcceptableValueList()
		{
			return PieceCategories.AcceptableValues;
		}

		/// <summary>
		///     Get the internal name for a piece category from its human readable name.
		/// </summary>
		/// <param name="pieceCategory"></param>
		/// <returns>
		///     The matched internal name.
		///     If the pieceCategory parameter is null or empty, an empty string is returned.
		///     Otherwise the unchanged pieceCategory parameter is returned.
		/// </returns>
		// Token: 0x060006B7 RID: 1719 RVA: 0x00020D78 File Offset: 0x0001EF78
		public static string GetInternalName(string pieceCategory)
		{
			if (string.IsNullOrEmpty(pieceCategory))
			{
				return string.Empty;
			}
			string internalName;
			if (PieceCategories.NamesMap.TryGetValue(pieceCategory, out internalName))
			{
				return internalName;
			}
			return pieceCategory;
		}

		// Token: 0x04000257 RID: 599
		private static readonly Dictionary<string, string> NamesMap = new Dictionary<string, string>
		{
			{
				"Misc",
				PieceCategories.Misc
			},
			{
				"Crafting",
				PieceCategories.Crafting
			},
			{
				"Building",
				PieceCategories.Building
			},
			{
				"HeavyBuild",
				PieceCategories.HeavyBuild
			},
			{
				"Furniture",
				PieceCategories.Furniture
			},
			{
				"Feasts",
				PieceCategories.Feasts
			},
			{
				"Food",
				PieceCategories.Food
			},
			{
				"Mead",
				PieceCategories.Mead
			},
			{
				"All",
				PieceCategories.All
			}
		};

		// Token: 0x04000258 RID: 600
		private static readonly AcceptableValueList<string> AcceptableValues = new AcceptableValueList<string>(PieceCategories.NamesMap.Keys.ToArray<string>());
	}
}
